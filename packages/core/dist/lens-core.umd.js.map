{"version":3,"file":"lens-core.umd.js","sources":["../src/index.js"],"sourcesContent":["import workerize from 'workerize';\n\n/**\n * It returns a canvas with the given width and height\n * @param {Number} w - width\n * @param {Number} h - height\n * @returns {Object}\n */\nfunction getCanvas(w, h) {\n    const canvas = document.createElement('canvas');\n    canvas.width = w;\n    canvas.height = h;\n\n    return canvas;\n}\n\n/**\n * Given a ImageData it returns the dataURL\n * @param {ImageData} imageData\n * @returns {String}\n */\nfunction convertImageDataToCanvasURL(imageData) {\n    const canvas = window.document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    canvas.width = imageData.width;\n    canvas.height = imageData.height;\n    ctx.putImageData(imageData, 0, 0);\n\n    return canvas.toDataURL();\n}\n\n/**\n * Given a worker file with the transformation the work is split\n * between the configured number of workers and the transformation is applied\n * returning a Promise\n * @param {Object} data - image data\n * @param {Function} transform - transformation function\n * @param {Object} options - object to be passed to the transform function\n * @param {Number} nWorkers - number of workers to transform the image\n * @returns {Promise}\n */\nfunction applyFilter({ data, transform, options, nWorkers }) {\n    const worker = workerize(`\n        var transform = ${transform};\n\n        export function execute(canvas, index, length, options) {\n            canvas.data = transform({ \n                data: canvas.data, \n                length: length, \n                options: options\n            });\n\n            return { result: canvas, index: index };\n        }\n    `);\n\n    // Drawing the source image into the target canvas\n    const canvas = getCanvas(data.width, data.height);\n    const context = canvas.getContext('2d');\n    context.putImageData(data, 0, 0);\n\n    // Minimium 1 worker\n    nWorkers = nWorkers || 1;\n\n    // Height of the picture chunck for every worker\n    const blockSize = Math.floor(canvas.height / nWorkers);\n\n    return new Promise(resolve => {\n        let finished = 0;\n        let height;\n\n        for (let index = 0; index < nWorkers; index++) {\n            // In the last worker we have to make sure we process whatever is missing\n            height = blockSize;\n\n            if (index + 1 === nWorkers) {\n                height = canvas.height - blockSize * index;\n            }\n\n            // Getting the picture\n            const canvasData = context.getImageData(\n                0,\n                blockSize * index,\n                canvas.width,\n                height\n            );\n            const length = height * canvas.width * 4;\n\n            worker\n                .execute(canvasData, index, length, options)\n                .then(response => {\n                    // Copying back canvas data to canvas\n                    // If the first webworker  (index 0) returns data, apply it at pixel (0, 0) onwards\n                    // If the second webworker  (index 1) returns data, apply it at pixel (0, canvas.height/4) onwards, and so on\n                    context.putImageData(\n                        response.result,\n                        0,\n                        blockSize * response.index\n                    );\n\n                    finished++;\n\n                    if (finished === nWorkers) {\n                        resolve(\n                            context.getImageData(\n                                0,\n                                0,\n                                canvas.width,\n                                canvas.height\n                            )\n                        );\n                    }\n                });\n        }\n    });\n}\n\nexports.getCanvas = getCanvas;\nexports.convertImageDataToCanvasURL = convertImageDataToCanvasURL;\nexports.applyFilter = applyFilter;\n"],"names":["getCanvas","w","h","canvas","document","createElement","width","height","exports","convertImageDataToCanvasURL","imageData","window","ctx","getContext","putImageData","toDataURL","applyFilter","data","transform","options","nWorkers","worker","workerize","context","blockSize","Math","floor","Promise","finished","index","canvasData","getImageData","length","execute","then","response","result"],"mappings":"wMAQA,SAASA,EAAUC,EAAGC,OACZC,EAASC,SAASC,cAAc,mBAC/BC,MAAQL,IACRM,OAASL,EAETC,+CAwGXK,QAAQR,UAAYA,EACpBQ,QAAQC,4BAjGR,SAAqCC,OAC3BP,EAASQ,OAAOP,SAASC,cAAc,UACvCO,EAAMT,EAAOU,WAAW,eACvBP,MAAQI,EAAUJ,QAClBC,OAASG,EAAUH,SACtBO,aAAaJ,EAAW,EAAG,GAExBP,EAAOY,aA2FlBP,QAAQQ,YA9ER,gBAAuBC,IAAAA,KAAMC,IAAAA,UAAWC,IAAAA,QAASC,IAAAA,SACvCC,EAASC,+BACOJ,uTAchBf,EAASH,EAAUiB,EAAKX,MAAOW,EAAKV,QACpCgB,EAAUpB,EAAOU,WAAW,QAC1BC,aAAaG,EAAM,EAAG,KAGnBG,GAAY,MAGjBI,EAAYC,KAAKC,MAAMvB,EAAOI,OAASa,UAEtC,IAAIO,QAAQ,oBACXC,EAAW,EACXrB,SAEKsB,EAAQ,EAAGA,EAAQT,EAAUS,IAAS,GAElCL,EAELK,EAAQ,IAAMT,MACLjB,EAAOI,OAASiB,EAAYK,OAInCC,EAAaP,EAAQQ,aACvB,EACAP,EAAYK,EACZ1B,EAAOG,MACPC,GAEEyB,EAASzB,EAASJ,EAAOG,MAAQ,IAGlC2B,QAAQH,EAAYD,EAAOG,EAAQb,GACnCe,KAAK,cAIMpB,aACJqB,EAASC,OACT,EACAZ,EAAYW,EAASN,aAKRT,KAETG,EAAQQ,aACJ,EACA,EACA5B,EAAOG,MACPH,EAAOI"}