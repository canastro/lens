{"version":3,"file":"lens-filter-color.umd.js","sources":["../src/index.js"],"sourcesContent":["import { applyFilter } from 'lens-core';\n\n/**\n * Iterate over the array applying the color transformation\n * @param {Object} data\n * @param {Number} length\n * @param {Object} options\n * @param {Array<ColorInterval>} [options.colorsInterval]\n */\nexport const transform = ({ data, length, options }) => {\n    /**\n     * Validates if param is numeric\n     * @param   {Number}  n\n     * @returns {Boolean}\n     */\n    const isNumeric = n => !isNaN(parseFloat(n)) && isFinite(n);\n\n    /**\n     * @param {Array} pixles\n     * @param {Number} index\n     * @param {Color} color\n     */\n    const applyPixelTransformation = (pixels, index, color) => {\n        pixels[index] = !isNumeric(color.r) ? pixels[index] : color.r;\n        pixels[index + 1] = !isNumeric(color.g) ? pixels[index + 1] : color.g;\n        pixels[index + 2] = !isNumeric(color.b) ? pixels[index + 2] : color.b;\n        pixels[index + 3] = !isNumeric(color.a) ? pixels[index + 3] : color.a;\n    };\n\n    /**\n     * @param {Array} data\n     * @param {Number} index\n     * @param {ColorInterval} colorInterval\n     */\n    const evaluatePixel = (data, index, colorInterval) => {\n        const red = data[index];\n        const green = data[index + 1];\n        const blue = data[index + 2];\n\n        return (\n            red >= colorInterval.from.r &&\n            red <= colorInterval.to.r &&\n            green >= colorInterval.from.g &&\n            green <= colorInterval.to.g &&\n            blue >= colorInterval.from.b &&\n            blue <= colorInterval.to.b\n        );\n    };\n\n    for (let i = 0; i < length; i += 4) {\n        options.colorsInterval.forEach(colorInterval => {\n            const isMatch = evaluatePixel(data, i, colorInterval);\n\n            if (isMatch && colorInterval.match) {\n                applyPixelTransformation(data, i, colorInterval.match);\n            } else if (!isMatch && colorInterval.noMatch) {\n                applyPixelTransformation(data, i, colorInterval.noMatch);\n            }\n        });\n    }\n\n    return data;\n};\n\n/**\n * @param {ImageData} data - data of a image extracted from a canvas\n * @param {Object} options - options to pass to the transformation function\n * @param {ColorInterval} [options.colorsInterval] - adjustment to apply in the transformation\n * @param {Number} nWorkers - number of workers\n * @returns {Promise}\n */\nexport default function color({ data, options, nWorkers } = {}) {\n    if (\n        !data ||\n        !options ||\n        !options.colorsInterval ||\n        !Array.isArray(options.colorsInterval)\n    ) {\n        throw new Error('lens-filter-color:: invalid options provided');\n    }\n\n    return applyFilter({ data, transform, options, nWorkers });\n}\n"],"names":["transform","data","length","options","isNumeric","isNaN","parseFloat","n","isFinite","applyPixelTransformation","pixels","index","color","r","g","b","a","i","colorsInterval","forEach","colorInterval","red","green","blue","isMatch","from","to","match","noMatch","nWorkers","Array","isArray","Error","applyFilter"],"mappings":"oPASaA,EAAY,oBAAGC,IAAAA,KAAMC,IAAAA,OAAQC,IAAAA,QAMhCC,EAAY,mBAAMC,MAAMC,WAAWC,KAAOC,SAASD,IAOnDE,EAA2B,SAACC,EAAQC,EAAOC,KACtCD,GAAUP,EAAUQ,EAAMC,GAAqBD,EAAMC,EAAtBH,EAAOC,KACtCA,EAAQ,GAAMP,EAAUQ,EAAME,GAAyBF,EAAME,EAA1BJ,EAAOC,EAAQ,KAClDA,EAAQ,GAAMP,EAAUQ,EAAMG,GAAyBH,EAAMG,EAA1BL,EAAOC,EAAQ,KAClDA,EAAQ,GAAMP,EAAUQ,EAAMI,GAAyBJ,EAAMI,EAA1BN,EAAOC,EAAQ,eAuBpDM,KACGC,eAAeC,QAAQ,gBAhBZlB,EAAMU,EAAOS,EAC1BC,EACAC,EACAC,EAcIC,GAjBsBJ,EAiBWA,EAhBrCC,GADapB,EAiBeA,GAjBTU,EAiBeM,GAflCK,EAAQrB,EAAKU,EAAQ,GACrBY,EAAOtB,EAAKU,EAAQ,GAGtBU,GAAOD,EAAcK,KAAKZ,GAC1BQ,GAAOD,EAAcM,GAAGb,GACxBS,GAASF,EAAcK,KAAKX,GAC5BQ,GAASF,EAAcM,GAAGZ,GAC1BS,GAAQH,EAAcK,KAAKV,GAC3BQ,GAAQH,EAAcM,GAAGX,GAQrBS,GAAWJ,EAAcO,QACA1B,EAAMgB,EAAGG,EAAcO,QACxCH,GAAWJ,EAAcQ,WACR3B,EAAMgB,EAAGG,EAAcQ,YAPnDX,EAAI,EAAGA,EAAIf,EAAQe,GAAK,IAAxBA,UAYFhB,2BAUI,wEAA6C,GAA5BA,IAAAA,KAAME,IAAAA,QAAS0B,IAAAA,cAEtC5B,GACAE,GACAA,EAAQe,gBACRY,MAAMC,QAAQ5B,EAAQe,uBAEjB,IAAIc,MAAM,uDAGbC,cAAY,CAAEhC,OAAMD,YAAWG,UAAS0B"}